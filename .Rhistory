str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.15)) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.08)) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.17)) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.09)) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.17)) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.09), size = 12) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.17), size = 9) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.09), size = 9) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.17), size = 6) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.09), size = 7) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
#library(colorspace)
#pal <- choose_palette()
library(RColorBrewer)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.17), size = 3) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.09), size = 4) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.17), size = 4) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.09), size = 5) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.17), size = 4.5) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.09), size = 5) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.16), size = 4.5) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.08), size = 5) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
typeOfData_label_img <- image_read('charts/typeOfData_label_raw.png')
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.16), size = 4.5) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.08), size = 5) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
ggsave(file="typeOfData_label.png", plot=typeOfData_label)
typeOfData_label_img <- image_read('charts/typeOfData_label_raw.png')
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.16), size = 4.5) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.08), size = 5) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="img/typeOfData_label.svg", plot=typeOfData_label)
ggsave(file="img/typeOfData_label_raw.png", plot=typeOfData_label)
typeOfData_label_img <- image_read('img/typeOfData_label_raw.png')
image_info(typeOfData_label_img)
tmp <- image_trim(typeOfData_label_img)
image_write(tmp, path='img/typeOfData_label.png', format='png')
image_info(tmp)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(readxl)
library(janitor)
t1 <- table(de$`Biosphere reserve`, useNA = 'always')
t1
install.packages('formattable')
library(formattable)
t1 <- table(de$`Biosphere reserve`, useNA = 'always')
formattable(t1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(readxl)
library(janitor)
library(formattable)
thisTable <- tabyl(thisData$Biosphere_reserve)
thisData <- de %>%
select('Biosphere reserve') %>%
drop_na()
names(thisData) <- 'Biosphere_reserve'
thisData[thisData == 'Komodo MPA',] <- 'Komodo'
thisData[thisData == 'Cat Tien (Dong Nai)',] <- 'Cat Tien'
thisTable <- tabyl(thisData$Biosphere_reserve)
names(thisTable)[1] <- 'Biosphere_reserve'
names(thisTable)[3] <- 'proportion'
thisTable <- thisTable[order(-thisTable$n),]
formattable(thisTable)
str(thisTable)
thisTable <- tabyl(thisData$Biosphere_reserve)
names(thisTable)[1] <- 'Biosphere_reserve'
names(thisTable)[3] <- 'proportion'
thisTable <- thisTable[order(-thisTable$n),]
formattable(thisTable, align='l')
kable(thisTable)
thisTable <- tabyl(thisData$Biosphere_reserve)
names(thisTable)[1] <- 'Biosphere_reserve'
names(thisTable)[3] <- 'proportion'
thisTable <- thisTable[order(-thisTable$n),]
formattable(thisTable, align='l')
kable(thisTable)
thisTable <- tabyl(thisData$Biosphere_reserve)
names(thisTable)[1] <- 'Biosphere_reserve'
names(thisTable)[3] <- 'proportion'
thisTable <- thisTable[order(-thisTable$n),]
formattable(thisTable, align='l')
kable(thisTable)
thisTable <- tabyl(thisData$Biosphere_reserve)
names(thisTable)[1] <- 'Biosphere_reserve'
names(thisTable)[3] <- 'proportion'
thisTable <- thisTable[order(-thisTable$n),]
formattable(thisTable, align='l')
thisTable
thisTable <- tabyl(thisData$Biosphere_reserve)
names(thisTable)[1] <- 'Biosphere_reserve'
names(thisTable)[3] <- 'proportion'
thisTable <- thisTable[order(-thisTable$n),]
# formattable(thisTable, align='l')
thisTable
thisData <- de %>%
select('Biosphere reserve') %>%
drop_na()
names(thisData) <- 'Biosphere_reserve'
thisData[thisData == 'Komodo MPA',] <- 'Komodo'
thisData[thisData == 'Cat Tien (Dong Nai)',] <- 'Cat Tien'
table(de$`Biosphere reserve`, useNA = 'always')
t1 <- table(de$`Biosphere reserve`, useNA = 'always')
kable(t1, col.names = NULL)
t1 <- table(de$`Biosphere reserve`, useNA = 'always')
t1
kable(t1, col.names = NULL)
t1 <- table(de$`Biosphere reserve`, useNA = 'always')
t1
kable(t1, col.names = NULL)
paged(t1, col.names = NULL)
install.packages('DT')
install.packages("DT")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(readxl)
library(janitor)
library(formattable)
library(DT)
t1 <- table(de$`Biosphere reserve`, useNA = 'always')
t1
kable(t1, col.names = NULL)
DT::renderDataTable(t1, rownames = FALSE)
# library(DT)
t1 <- table(de$`Biosphere reserve`, useNA = 'always')
t1
kable(t1, col.names = NULL)
# DT::renderDataTable(t1, rownames = FALSE)
# library(DT)
t1 <- table(de$`Biosphere reserve`, useNA = 'always')
kable(t1)
# DT::renderDataTable(t1, rownames = FALSE)
str(t1)
rownames(t1)[1] <- 'Value')
# library(DT)
t1 <- table(de$`Biosphere reserve`, useNA = 'always')
rownames(t1)[1] <- 'Value'
kable(t1)
# DT::renderDataTable(t1, rownames = FALSE)
str(t1)
# library(DT)
t1 <- table(de$`Biosphere reserve`, useNA = 'always')
dimnames(t1) <- c('Value','n')
# library(DT)
t1 <- table(de$`Biosphere reserve`, useNA = 'always')
kable(t1, col.names = NULL)
# DT::renderDataTable(t1, rownames = FALSE)
thisTable <- tabyl(thisData$Biosphere_reserve)
names(thisTable)[1] <- 'Biosphere_reserve'
names(thisTable)[3] <- 'proportion'
thisTable <- thisTable[order(-thisTable$n),]
# formattable(thisTable, align='l')
thisTable
kable(thisTable)
thisTable <- tabyl(thisData$Biosphere_reserve)
names(thisTable)[1] <- 'Biosphere_reserve'
names(thisTable)[3] <- 'proportion'
thisTable <- thisTable[order(-thisTable$n),]
# formattable(thisTable, align='l')
rownames(thisTable) <- c()
kable(thisTable)
thisTable <- tabyl(thisData$Biosphere_reserve)
names(thisTable)[1] <- 'Biosphere_reserve'
names(thisTable)[3] <- 'proportion'
thisTable <- thisTable[order(-thisTable$n),]
rownames(thisTable) <- c()
kable(thisTable)
formattable(thisTable, align='l')
t1 <- table(de$`Biosphere reserve`, useNA = 'always')
kable(t1, col.names = NULL)
thisTable <- tabyl(thisData$Biosphere_reserve)
names(thisTable)[1] <- 'Biosphere_reserve'
names(thisTable)[3] <- 'proportion'
thisTable <- thisTable[order(-thisTable$n),]
rownames(thisTable) <- c()
# kable(thisTable)
formattable(thisTable, align='l')
thisData <- de %>%
select('Biosphere reserve') %>%
drop_na()
names(thisData) <- 'Biosphere_reserve'
thisData[thisData == 'Komodo MPA',] <- 'Komodo'
thisData[thisData == 'Cat Tien (Dong Nai)',] <- 'Cat Tien'
thisTable <- tabyl(thisData$Biosphere_reserve)
names(thisTable)[1] <- 'Biosphere_reserve'
names(thisTable)[3] <- 'proportion'
thisTable <- thisTable[order(-thisTable$n),]
rownames(thisTable) <- c()
# kable(thisTable)
formattable(thisTable, align='l')
t1 <- table(de$`Biosphere reserve`, useNA = 'always')
#kable(t1, col.names = NULL)
t1
table(de$`Data source`, useNA = 'always')
thisData <- de %>%
select('Data source') %>%
drop_na()
names(thisData) <- 'Data_source'
thisData[thisData == 'Grey literature organisational report',] <- 'Report'
thisData[thisData == 'Peer-reviewed published literature',] <- 'Peer-reviewed'
thisTable <- tabyl(thisData$Data_source)
names(thisTable)[1] <- 'Data source'
#names(thisTable)[3] <- 'proportion'
thisTable <- thisTable[order(-thisTable$n),]
rownames(thisTable) <- c()
formattable(thisTable, align='l')
tinytex::install_tinytex()
install.packages(('patchwork'))
knitr::opts_chunk$set(echo = FALSE)
library(patchwork)
