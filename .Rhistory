geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.2)) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.3,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.2)) +
geom_text(aes(label = Value),
position = position_fill(vjust = 0.15)) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- Value * 100
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.3,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.2)) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.15)) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.3,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.2)) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.12)) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.15)) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.7)) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.15)) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.9)) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.15)) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.08)) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.17)) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.09)) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.17)) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.09), size = 12) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.17), size = 9) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.09), size = 9) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.17), size = 6) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.09), size = 7) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
#library(colorspace)
#pal <- choose_palette()
library(RColorBrewer)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.17), size = 3) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.09), size = 4) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.17), size = 4) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.09), size = 5) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.17), size = 4.5) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.09), size = 5) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.16), size = 4.5) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.08), size = 5) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
#ggsave(file="typeOfData_label.png", plot=typeOfData_label)
typeOfData_label_img <- image_read('charts/typeOfData_label_raw.png')
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.16), size = 4.5) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.08), size = 5) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="typeOfData_label.svg", plot=typeOfData_label)
ggsave(file="typeOfData_label.png", plot=typeOfData_label)
typeOfData_label_img <- image_read('charts/typeOfData_label_raw.png')
labelonly <-  theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
Name <- t_type$Type_of_data
Value <- t_type$percent
absolute <- t_type$n
percent <- format(round(Value * 100, 0), nsmall = 0)
str <- paste0(absolute, ' (', percent, '%)')
df <-  data.frame(Name, Value) %>%
mutate(Name = factor(Name, levels = Name),
xPos = cumsum(lag(Value, default = 0)) + Value/2) # calculate interval position
typeOfData_label <- ggplot(data = df, aes(x = xPos, y = 0.25,
width = Value, fill = Name)) +
geom_col(position = "identity", show.legend = FALSE) +
geom_text(aes(label = Name),
position = position_fill(vjust = 0.16), size = 4.5) +
geom_text(aes(label = str),
position = position_fill(vjust = 0.08), size = 5) +
labelonly +
scale_fill_brewer(palette = "Reds")
typeOfData_label
#ggsave(file="img/typeOfData_label.svg", plot=typeOfData_label)
ggsave(file="img/typeOfData_label_raw.png", plot=typeOfData_label)
typeOfData_label_img <- image_read('img/typeOfData_label_raw.png')
image_info(typeOfData_label_img)
tmp <- image_trim(typeOfData_label_img)
image_write(tmp, path='img/typeOfData_label.png', format='png')
image_info(tmp)
